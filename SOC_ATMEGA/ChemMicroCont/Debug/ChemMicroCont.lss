
ChemMicroCont.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  0000028a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab5  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000845  00000000  00000000  00000e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000503  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000104  00000000  00000000  000020c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000021c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  9e:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <AdcInit>:
 */ 
#include "ADClib.h"

void AdcInit(void)
{
	DDRC &= ~(1<<PORTC2) | ~(1<<PORTC4) | ~(1<<PORTC5); //set  channels as inputs
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	87 b9       	out	0x07, r24	; 7
			//AVCC with external capacitor at AREF pin, channel by default 0 will be changed in AdcRead()
	ADCSRA |= (1<<ADPS2);//|(1<<ADPS1)|(1<<ADPS0); //set prescaler to 128
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <AdcRead>:
	
}

uint16_t AdcRead(char chnl) //takes in channel and outputs read value, we are using ADC2(0010), ADC4(0100) and ADC5(0101)
{
	ADMUX = 0b01000000 | chnl;//or with 0b01000000 to set external volt ref.  channel by default 0 will be changed in AdcRead() //set channel
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADEN) | (1<<ADSC); //enable ADC and start conversion
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 6c       	ori	r24, 0xC0	; 192
  c4:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC)); //wait while conversion is in progress
  c6:	80 81       	ld	r24, Z
  c8:	86 fd       	sbrc	r24, 6
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <AdcRead+0x10>
	ADCSRA &= ~(1<<ADEN); //turn off ADC
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8f 77       	andi	r24, 0x7F	; 127
  d4:	80 83       	st	Z, r24
	
	return (ADCL | (ADCH<<8));	
  d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  da:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	92 2b       	or	r25, r18
  e2:	08 95       	ret

000000e4 <Int_init>:
	USART_send_string("hi");
}

void Int_init(void)
{
	EICRA &= ~(1<<ISC00) | ~(1<<ISC01);
  e4:	e9 e6       	ldi	r30, 0x69	; 105
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
  ec:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <main>:

char buffer[5], Tbuf[10];

int main(void)
{
    AdcInit();
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <AdcInit>
	USART_init(38400);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	96 e9       	ldi	r25, 0x96	; 150
  fa:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_init>
	Int_init();
  fe:	0e 94 72 00 	call	0xe4	; 0xe4 <Int_init>
		{
			pH = AdcRead(chpH);
			temp = AdcRead(chtemp);
			uv = AdcRead(chuv);
			
			Tbuf[0] = ((temp<<8)>>8);
 102:	ca e0       	ldi	r28, 0x0A	; 10
 104:	d1 e0       	ldi	r29, 0x01	; 1
			if(temp>>8 != 0)	//correctment Process
				Tbuf[1] = (temp>>8); //if the result is less than 512 this byte is be set to Null what is BAD, yep remember to zeroe that at the end so that next under-512 ADC result is set similarly
			else
				Tbuf[1] = 0b10000000;
 106:	68 94       	set
 108:	bb 24       	eor	r11, r11
 10a:	b7 f8       	bld	r11, 7
				Tbuf[6] = 0b10000000;
			//Always whole buffer is sent, null terminated by Tbuf[7]
			if(icounter)
			{
				icounter--;
				Tbuf[4] = 1;	//to read			
 10c:	aa 24       	eor	r10, r10
 10e:	a3 94       	inc	r10
	USART_init(38400);
	Int_init();
	
    while (1) 
    {
		if(USART_Receive_byte() == 'X') //if request 'X' arrives then measurements are done and results retrieved 
 110:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <USART_Receive_byte>
 114:	88 35       	cpi	r24, 0x58	; 88
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x1e>
		{
			pH = AdcRead(chpH);
 118:	85 e0       	ldi	r24, 0x05	; 5
 11a:	0e 94 5b 00 	call	0xb6	; 0xb6 <AdcRead>
 11e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <pH+0x1>
 122:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pH>
			temp = AdcRead(chtemp);
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	0e 94 5b 00 	call	0xb6	; 0xb6 <AdcRead>
 12c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <temp+0x1>
 130:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <temp>
			uv = AdcRead(chuv);
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 5b 00 	call	0xb6	; 0xb6 <AdcRead>
 13a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <uv>
 13e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <uv+0x1>
			
			Tbuf[0] = ((temp<<8)>>8);
 142:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <temp>
 146:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp+0x1>
 14a:	38 83       	st	Y, r19
			if(temp>>8 != 0)	//correctment Process
 14c:	02 2f       	mov	r16, r18
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	01 2b       	or	r16, r17
 152:	11 f0       	breq	.+4      	; 0x158 <main+0x66>
				Tbuf[1] = (temp>>8); //if the result is less than 512 this byte is be set to Null what is BAD, yep remember to zeroe that at the end so that next under-512 ADC result is set similarly
 154:	29 83       	std	Y+1, r18	; 0x01
 156:	01 c0       	rjmp	.+2      	; 0x15a <main+0x68>
			else
				Tbuf[1] = 0b10000000;
 158:	b9 82       	std	Y+1, r11	; 0x01
			
			Tbuf[2] = ((pH<<8)>>8);
 15a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pH>
 15e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pH+0x1>
 162:	3a 83       	std	Y+2, r19	; 0x02
			if(pH>>8 != 0)
 164:	e2 2e       	mov	r14, r18
 166:	f1 2c       	mov	r15, r1
 168:	ef 28       	or	r14, r15
 16a:	11 f0       	breq	.+4      	; 0x170 <main+0x7e>
				Tbuf[3] = (pH>>8);
 16c:	2b 83       	std	Y+3, r18	; 0x03
 16e:	01 c0       	rjmp	.+2      	; 0x172 <main+0x80>
			else
				Tbuf[3] = 0b10000000;
 170:	bb 82       	std	Y+3, r11	; 0x03
			//
			Tbuf[4] = 2;		//not to read
 172:	22 e0       	ldi	r18, 0x02	; 2
 174:	2c 83       	std	Y+4, r18	; 0x04
			//
			Tbuf[5] = ((uv<<8)>>8);
 176:	8d 83       	std	Y+5, r24	; 0x05
			if(uv>>8 != 0)			//does not have to be here but is safer since not definition of upper byte in memory of computer might result in wild bugs
 178:	c9 2e       	mov	r12, r25
 17a:	d1 2c       	mov	r13, r1
 17c:	cd 28       	or	r12, r13
 17e:	11 f0       	breq	.+4      	; 0x184 <main+0x92>
				Tbuf[6] = (uv>>8);
 180:	9e 83       	std	Y+6, r25	; 0x06
 182:	01 c0       	rjmp	.+2      	; 0x186 <main+0x94>
			else
				Tbuf[6] = 0b10000000;
 184:	be 82       	std	Y+6, r11	; 0x06
			//Always whole buffer is sent, null terminated by Tbuf[7]
			if(icounter)
 186:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 18a:	88 23       	and	r24, r24
 18c:	21 f0       	breq	.+8      	; 0x196 <main+0xa4>
			{
				icounter--;
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
				Tbuf[4] = 1;	//to read			
 194:	ac 82       	std	Y+4, r10	; 0x04
			}
			
			USART_send_string(Tbuf);
 196:	ce 01       	movw	r24, r28
 198:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <USART_send_string>
 19c:	b9 cf       	rjmp	.-142    	; 0x110 <main+0x1e>

0000019e <__vector_1>:
	EIMSK |= (1<<INT0);
	sei();
}

ISR(INT0_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	8f 93       	push	r24
	//controlint = 1;
	icounter = 3; //set value for transmit cycles
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	// user code here
}
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <USART_init>:
void USART_init( unsigned int baudr)
{
	//add baudrate converter
	char ubrr= 12;//(((long)Xtal/(16*baudr))-1); //38400 has only 0.2%err
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 1bc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//Enable receiver and transmitter 
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);/* Set frame format: 8data, 1stop bit */
 1c6:	88 e1       	ldi	r24, 0x18	; 24
 1c8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1d2:	08 95       	ret

000001d4 <USART_Transmit_byte>:
}

void USART_Transmit_byte( unsigned char data ) //send byte
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 1d4:	e0 ec       	ldi	r30, 0xC0	; 192
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	90 81       	ld	r25, Z
 1da:	95 ff       	sbrs	r25, 5
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <USART_Transmit_byte+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1e2:	08 95       	ret

000001e4 <USART_Receive_byte>:
}

unsigned char USART_Receive_byte( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 1e4:	e0 ec       	ldi	r30, 0xC0	; 192
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	88 23       	and	r24, r24
 1ec:	ec f7       	brge	.-6      	; 0x1e8 <USART_Receive_byte+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 1ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 1f2:	08 95       	ret

000001f4 <USART_send_string>:

void USART_send_string(char *str)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ec 01       	movw	r28, r24
	while(*str)
 1fa:	88 81       	ld	r24, Y
 1fc:	88 23       	and	r24, r24
 1fe:	31 f0       	breq	.+12     	; 0x20c <USART_send_string+0x18>
 200:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_Transmit_byte(*str);
 202:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <USART_Transmit_byte>
	return UDR0;
}

void USART_send_string(char *str)
{
	while(*str)
 206:	89 91       	ld	r24, Y+
 208:	81 11       	cpse	r24, r1
 20a:	fb cf       	rjmp	.-10     	; 0x202 <USART_send_string+0xe>
	{
		USART_Transmit_byte(*str);
		str++;
	}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
